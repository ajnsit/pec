{
{-# OPTIONS -w #-}
-- Haskell module generated by grm *** DO NOT EDIT ***


module Language.C.Par where
import Grm.Prims
import Grm.Lex
import Language.C.Abs
}
%tokentype { (Token Point) }
%name grmParse
%token
  "\n" { TSymbol _ "\n" }
  "\n#define" { TSymbol _ "\n#define" }
  "\n#endif" { TSymbol _ "\n#endif" }
  "!" { TSymbol _ "!" }
  "#ifndef" { TSymbol _ "#ifndef" }
  "#include" { TSymbol _ "#include" }
  "&" { TSymbol _ "&" }
  "(" { TSymbol _ "(" }
  ")" { TSymbol _ ")" }
  "*" { TSymbol _ "*" }
  "++" { TSymbol _ "++" }
  "," { TSymbol _ "," }
  "--" { TSymbol _ "--" }
  "->" { TSymbol _ "->" }
  "." { TSymbol _ "." }
  ":" { TSymbol _ ":" }
  ";" { TSymbol _ ";" }
  "<" { TSymbol _ "<" }
  "=" { TSymbol _ "=" }
  ">" { TSymbol _ ">" }
  "[" { TSymbol _ "[" }
  "]" { TSymbol _ "]" }
  "alloca" { TSymbol _ "alloca" }
  "break" { TSymbol _ "break" }
  "case" { TSymbol _ "case" }
  "default:" { TSymbol _ "default:" }
  "else" { TSymbol _ "else" }
  "enum" { TSymbol _ "enum" }
  "if" { TSymbol _ "if" }
  "return" { TSymbol _ "return" }
  "sizeof" { TSymbol _ "sizeof" }
  "struct" { TSymbol _ "struct" }
  "switch" { TSymbol _ "switch" }
  "typedef" { TSymbol _ "typedef" }
  "union" { TSymbol _ "union" }
  "while" { TSymbol _ "while" }
  "{" { TSymbol _ "{" }
  "}" { TSymbol _ "}" }

  uident { TUident _ _ }
  usym { TUsym _ _ }
  lident { TLident _ _ }
  string { TString _ _ }
  char { TChar _ _ }
  number { TNumber _ _ }
%%
Module
  : "#ifndef" uident "\n#define" uident "\n" ImportList DeclareList "\n#endif" {HModule   (unTUident $2)  (unTUident $4)  $6 $7 }
  | ImportList DefineList {CModule  $1 $2}
Import
  : "#include" string {Import   (unTString $2)}
  | "#include" "<"  lident  ">" {GImport     (unTLident $3)  }
Declare
  : FunDecl {Declare  $1}
  | "typedef" Decl {Typedef   $2}
Define
  : FunDecl "{" StmtList "}" {Define  $1  $3 }
  
FunDecl
  : Type lident  "("  ArgDeclList  ")" {FunFD  $1 (unTLident $2)    $4  }
  | Type "(" "*" lident "("  ArgDeclList  ")" ")" "("  TypeList  ")" {RetFunFD  $1   (unTLident $4)   $6      $10  }
Type
  : uident {TyName  (unTUident $1)}
  | Type  "*" {TyPtr  $1  }
  | Type "("  "*"  ")" "("  TypeList  ")" {TyFun  $1        $6  }
  | Type "[" number "]" {TyArray  $1  (unTNumber $3) }
  | "enum" "{" EnumCList "}" {TyEnum    $3 }
  | "struct" "{" DeclList "}" {TyStruct    $3 }
  | "union" "{" DeclList "}" {TyUnion    $3 }
EnumC
  : uident {EnumC  (unTUident $1)}
  
Decl
  : Type lident {Decl  $1 (unTLident $2)}
  | Type lident  "("  TypeList  ")" {FunD  $1 (unTLident $2)    $4  }
Exp
  : "alloca" "(" "sizeof" "(" Type ")" ")" {AllocaE      $5  }
  | lident {VarE  (unTLident $1)}
  | Lit {LitE  $1}
  | "(" Type ")" Exp {CastE   $2  $4}
  | "*"  Exp {LoadE    $2}
  | Exp  "->"  Exp {ArrowE  $1    $3}
  | Exp  "."  Exp {DotE  $1    $3}
  | "&"  Exp {AddrE    $2}
  | Exp  "["  Exp  "]" {IdxE  $1    $3  }
  | Exp  "("  ExpList  ")" {CallE  $1    $3  }
  | "("  Exp usym Exp  ")" {BinOpE    $2 (unTUsym $3) $4  }
  | "(" Exp ")" {ParenE   $2 }
  | "!"  Exp {NotE    $2}
Stmt
  : Decl {DeclS  $1}
  | Exp "=" Exp {AssignS  $1  $3}
  | Exp  "("  ExpList  ")" {CallS  $1    $3  }
  | "switch" "(" Exp ")" "{" SwitchAltList "}" {SwitchS    $3   $6 }
  | "break" {BreakS  }
  | "if" "(" Exp ")" "{" StmtList "}" "else" "{" StmtList "}" {IfS    $3   $6    $10 }
  | "if" "(" Exp ")" "{" StmtList "}" {WhenS    $3   $6 }
  | "while" "(" Exp ")" "{" StmtList "}" {WhileS    $3   $6 }
  | "return"  "("  Exp  ")" {ReturnS      $3  }
  | "return" {RetVoidS  }
  | {NoOpS }
  | StmtList {BlockS  $1}
  | Exp  "++" {IncS  $1  }
  | Exp  "--" {DecS  $1  }
SwitchAlt
  : "case" Lit  ":" StmtList {SwitchAlt   $2   $4}
  | "default:" StmtList {DefaultAlt   $2}
Lit
  : string {StringL  (unTString $1)}
  | char {CharL  (unTChar $1)}
  | number {NmbrL  (unTNumber $1)}
  | uident {EnumL  (unTUident $1)}
TypeList
  : REV_TypeList {reverse $1}
  | {- empty -} { [] }
REV_TypeList
  : Type {[$1]}
  | REV_TypeList "," Type {$3 : $1}
ExpList
  : REV_ExpList {reverse $1}
  
REV_ExpList
  : Exp {[$1]}
  | REV_ExpList "," Exp {$3 : $1}
EnumCList
  : REV_EnumCList {reverse $1}
  
REV_EnumCList
  : EnumC {[$1]}
  | REV_EnumCList "," EnumC {$3 : $1}
DeclList
  : REV_DeclList {reverse $1}
  | {- empty -} { [] }
REV_DeclList
  : Decl ";" {[$1]}
  | REV_DeclList Decl ";" {$2 : $1}
ArgDeclList
  : REV_ArgDeclList {reverse $1}
  | {- empty -} { [] }
REV_ArgDeclList
  : Decl {[$1]}
  | REV_ArgDeclList "," Decl {$3 : $1}
SwitchAltList
  : REV_SwitchAltList {reverse $1}
  | {- empty -} { [] }
REV_SwitchAltList
  : SwitchAlt {[$1]}
  | REV_SwitchAltList SwitchAlt {$2 : $1}
StmtList
  : REV_StmtList {reverse $1}
  | {- empty -} { [] }
REV_StmtList
  : Stmt ";" {[$1]}
  | REV_StmtList Stmt ";" {$2 : $1}
DeclareList
  : REV_DeclareList {reverse $1}
  | {- empty -} { [] }
REV_DeclareList
  : Declare ";" {[$1]}
  | REV_DeclareList Declare ";" {$2 : $1}
DefineList
  : REV_DefineList {reverse $1}
  | {- empty -} { [] }
REV_DefineList
  : Define ";" {[$1]}
  | REV_DefineList Define ";" {$2 : $1}
ImportList
  : REV_ImportList {reverse $1}
  | {- empty -} { [] }
REV_ImportList
  : Import {[$1]}
  | REV_ImportList Import {$2 : $1}
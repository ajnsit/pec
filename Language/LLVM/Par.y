{
{-# OPTIONS -w #-}
-- Haskell module generated by grm *** DO NOT EDIT ***


module Language.LLVM.Par where
import Grm.Prims
import Grm.Lex
import Language.LLVM.Abs
}
%tokentype { (Token Point) }
%name grmParse
%token
  "\"" { TSymbol _ "\"" }
  "(" { TSymbol _ "(" }
  ")" { TSymbol _ ")" }
  "*" { TSymbol _ "*" }
  "," { TSymbol _ "," }
  ", i32 0," { TSymbol _ ", i32 0," }
  ", i32 0, i32 0)" { TSymbol _ ", i32 0, i32 0)" }
  ", label %" { TSymbol _ ", label %" }
  "..." { TSymbol _ "..." }
  ":" { TSymbol _ ":" }
  "::" { TSymbol _ "::" }
  ";" { TSymbol _ ";" }
  "=" { TSymbol _ "=" }
  "= private constant [" { TSymbol _ "= private constant [" }
  "[" { TSymbol _ "[" }
  "\\00\"" { TSymbol _ "\\00\"" }
  "]" { TSymbol _ "]" }
  "add nuw nsw" { TSymbol _ "add nuw nsw" }
  "alloca" { TSymbol _ "alloca" }
  "and" { TSymbol _ "and" }
  "bitcast" { TSymbol _ "bitcast" }
  "br i1" { TSymbol _ "br i1" }
  "br label %" { TSymbol _ "br label %" }
  "call" { TSymbol _ "call" }
  "declare" { TSymbol _ "declare" }
  "define" { TSymbol _ "define" }
  "double" { TSymbol _ "double" }
  "eq" { TSymbol _ "eq" }
  "fadd" { TSymbol _ "fadd" }
  "false" { TSymbol _ "false" }
  "fcmp" { TSymbol _ "fcmp" }
  "fdiv" { TSymbol _ "fdiv" }
  "float" { TSymbol _ "float" }
  "fmul" { TSymbol _ "fmul" }
  "fpext" { TSymbol _ "fpext" }
  "fptosi" { TSymbol _ "fptosi" }
  "fptoui" { TSymbol _ "fptoui" }
  "fptrunc" { TSymbol _ "fptrunc" }
  "frem" { TSymbol _ "frem" }
  "fsub" { TSymbol _ "fsub" }
  "getelementptr inbounds" { TSymbol _ "getelementptr inbounds" }
  "getelementptr inbounds ([" { TSymbol _ "getelementptr inbounds ([" }
  "i" { TSymbol _ "i" }
  "i8" { TSymbol _ "i8" }
  "icmp" { TSymbol _ "icmp" }
  "load" { TSymbol _ "load" }
  "lshr" { TSymbol _ "lshr" }
  "mul nuw nsw" { TSymbol _ "mul nuw nsw" }
  "ne" { TSymbol _ "ne" }
  "oge" { TSymbol _ "oge" }
  "ogt" { TSymbol _ "ogt" }
  "ole" { TSymbol _ "ole" }
  "olt" { TSymbol _ "olt" }
  "or" { TSymbol _ "or" }
  "ret" { TSymbol _ "ret" }
  "sdiv" { TSymbol _ "sdiv" }
  "sext" { TSymbol _ "sext" }
  "sge" { TSymbol _ "sge" }
  "sgt" { TSymbol _ "sgt" }
  "shl" { TSymbol _ "shl" }
  "sitofp" { TSymbol _ "sitofp" }
  "sle" { TSymbol _ "sle" }
  "slt" { TSymbol _ "slt" }
  "srem" { TSymbol _ "srem" }
  "store" { TSymbol _ "store" }
  "sub nuw nsw" { TSymbol _ "sub nuw nsw" }
  "switch" { TSymbol _ "switch" }
  "to" { TSymbol _ "to" }
  "true" { TSymbol _ "true" }
  "trunc" { TSymbol _ "trunc" }
  "type" { TSymbol _ "type" }
  "udiv" { TSymbol _ "udiv" }
  "uge" { TSymbol _ "uge" }
  "ugt" { TSymbol _ "ugt" }
  "uitofp" { TSymbol _ "uitofp" }
  "ule" { TSymbol _ "ule" }
  "ult" { TSymbol _ "ult" }
  "urem" { TSymbol _ "urem" }
  "void" { TSymbol _ "void" }
  "x" { TSymbol _ "x" }
  "x i8 ] c" { TSymbol _ "x i8 ] c" }
  "x i8 ]*" { TSymbol _ "x i8 ]*" }
  "xor" { TSymbol _ "xor" }
  "zext" { TSymbol _ "zext" }
  "{" { TSymbol _ "{" }
  "|" { TSymbol _ "|" }
  "}" { TSymbol _ "}" }

  uident { TUident _ _ }
  usym { TUsym _ _ }
  lident { TLident _ _ }
  string { TString _ _ }
  char { TChar _ _ }
  number { TNumber _ _ }
%%
Module
  : DefineList {Module  $1}
  
Define
  : "define" Type lident "(" TVarList ")" "{" StmtList "}" {Define   $2 (unTLident $3)  $5   $8 }
  | "declare" Type lident "(" TypeList ")" {Declare   $2 (unTLident $3)  $5 }
  | lident "=" "type" Type {TypeD  (unTLident $1)   $4}
  | lident "= private constant [" number "x i8 ] c"  "\""  lident  "\\00\"" {StringD  (unTLident $1)  (unTNumber $3)     (unTLident $6)  }
Stmt
  : lident "=" Exp {LetS  (unTLident $1)  $3}
  | "store" Atom  "," TVar {StoreS   $2   $4}
  | "call" TVar "(" AtomList ")" {CallS   $2  $4 }
  | "switch" Atom  ", label %"  lident "[" SwitchAltList "]" {SwitchS   $2    (unTLident $4)  $6 }
  | "ret" Atom {ReturnS   $2}
  | lident  ":" {LabelS  (unTLident $1)  }
  | "br i1" UAtom  ", label %"  lident  ", label %"  lident {BrS   $2    (unTLident $4)    (unTLident $6)}
  | "br label %"  lident {Br0S    (unTLident $2)}
  | "store" Atom  "," {TagS   $2  }
  | ";" {NoOpS  }
Exp
  : "call" TVar "(" AtomList ")" {CallE   $2  $4 }
  | Cast TVar "to" Type {CastE  $1 $2  $4}
  | "alloca" Type {AllocaE   $2}
  | "load" TVar {LoadE   $2}
  | Atom {AtomE  $1}
  | BinOp Type UAtom  "," UAtom {BinOpE  $1 $2 $3   $5}
  | "getelementptr inbounds" TVar  ", i32 0," Atom {IdxE   $2   $4}
Cast
  : "bitcast" {Bitcast  }
  | "sitofp" {Sitofp  }
  | "uitofp" {Uitofp  }
  | "fptosi" {Fptosi  }
  | "fptoui" {Fptoui  }
  | "trunc" {Trunc  }
  | "zext" {Zext  }
  | "sext" {Sext  }
  | "fptrunc" {Fptrunc  }
  | "fpext" {Fpext  }
BinOp
  : "icmp" ICond {Icmp   $2}
  | "fcmp" FCond {Fcmp   $2}
  | "add nuw nsw" {Add  }
  | "fadd" {Fadd  }
  | "sub nuw nsw" {Sub  }
  | "fsub" {Fsub  }
  | "mul nuw nsw" {Mul  }
  | "fmul" {Fmul  }
  | "udiv" {Udiv  }
  | "sdiv" {Sdiv  }
  | "fdiv" {Fdiv  }
  | "urem" {Urem  }
  | "srem" {Srem  }
  | "frem" {Frem  }
  | "shl" {Shl  }
  | "lshr" {Lshr  }
  | "and" {And  }
  | "or" {Or  }
  | "xor" {Xor  }
Atom
  : TLit {LitA  $1}
  | TVar {VarA  $1}
UAtom
  : Lit {LitUA  $1}
  | lident {VarUA  (unTLident $1)}
ICond
  : "eq" {Equ  }
  | "ne" {Neq  }
  | "ugt" {Ugt  }
  | "sgt" {Sgt  }
  | "uge" {Uge  }
  | "sge" {Sge  }
  | "ult" {Ult  }
  | "slt" {Slt  }
  | "ule" {Ule  }
  | "sle" {Sle  }
FCond
  : "ogt" {Ogt  }
  | "oge" {Oge  }
  | "olt" {Olt  }
  | "ole" {Ole  }
SwitchAlt
  : TLit  ", label %"  lident {SwitchAlt  $1    (unTLident $3)}
  
Lit
  : number {NmbrL  (unTNumber $1)}
  | "false" {FalseL  }
  | "true" {TrueL  }
  | "getelementptr inbounds ([" number "x i8 ]*" lident  ", i32 0, i32 0)" {StringL   (unTNumber $2)  (unTLident $4)  }
  | {VoidL }
TVar
  : Type lident {TVar  $1 (unTLident $2)}
  
TLit
  : Type Lit {TLit  $1 $2}
  
FieldT
  : uident "::" Type {FieldT  (unTUident $1)  $3}
  
ConC
  : uident Type {ConC  (unTUident $1) $2}
  
Type
  : Type  "*" {PtrT  $1  }
  | "i"  number {IntT    (unTNumber $2)}
  | "float" {FloatT  }
  | "double" {DoubleT  }
  | "void" {VoidT  }
  | Type "(" TypeList ")" {FunT  $1  $3 }
  | "..." {VarArgsT  }
  | lident {UserT  (unTLident $1)}
  | "{" TypeList "}" {StructT   $2 }
  | "[" number "x" Type "]" {ArrayT   (unTNumber $2)  $4 }
  | "i8" {CharT  }
ConCList
  : REV_ConCList {reverse $1}
  
REV_ConCList
  : ConC {[$1]}
  | REV_ConCList "|" ConC {$3 : $1}
FieldTList
  : REV_FieldTList {reverse $1}
  
REV_FieldTList
  : FieldT {[$1]}
  | REV_FieldTList "," FieldT {$3 : $1}
TypeList
  : REV_TypeList {reverse $1}
  | {- empty -} { [] }
REV_TypeList
  : Type {[$1]}
  | REV_TypeList "," Type {$3 : $1}
ExpList
  : REV_ExpList {reverse $1}
  
REV_ExpList
  : Exp {[$1]}
  | REV_ExpList "," Exp {$3 : $1}
AtomList
  : REV_AtomList {reverse $1}
  
REV_AtomList
  : Atom {[$1]}
  | REV_AtomList "," Atom {$3 : $1}
TVarList
  : REV_TVarList {reverse $1}
  
REV_TVarList
  : TVar {[$1]}
  | REV_TVarList "," TVar {$3 : $1}
SwitchAltList
  : REV_SwitchAltList {reverse $1}
  | {- empty -} { [] }
REV_SwitchAltList
  : SwitchAlt {[$1]}
  | REV_SwitchAltList SwitchAlt {$2 : $1}
StmtList
  : REV_StmtList {reverse $1}
  | {- empty -} { [] }
REV_StmtList
  : Stmt {[$1]}
  | REV_StmtList Stmt {$2 : $1}
DefineList
  : REV_DefineList {reverse $1}
  | {- empty -} { [] }
REV_DefineList
  : Define {[$1]}
  | REV_DefineList Define {$2 : $1}
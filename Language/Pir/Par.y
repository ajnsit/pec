{
{-# OPTIONS -w #-}
-- Haskell module generated by grm *** DO NOT EDIT ***


module Language.Pir.Par where
import Grm.Prims
import Grm.Lex
import Language.Pir.Abs
}
%tokentype { (Token Point) }
%name grmParse
%token
  "(" { TSymbol _ "(" }
  ")" { TSymbol _ ")" }
  "," { TSymbol _ "," }
  "->" { TSymbol _ "->" }
  "::" { TSymbol _ "::" }
  ":=" { TSymbol _ ":=" }
  ";" { TSymbol _ ";" }
  "=" { TSymbol _ "=" }
  "alloca" { TSymbol _ "alloca" }
  "call" { TSymbol _ "call" }
  "cast" { TSymbol _ "cast" }
  "define" { TSymbol _ "define" }
  "enum" { TSymbol _ "enum" }
  "if" { TSymbol _ "if" }
  "import" { TSymbol _ "import" }
  "load" { TSymbol _ "load" }
  "module" { TSymbol _ "module" }
  "noop" { TSymbol _ "noop" }
  "record" { TSymbol _ "record" }
  "return" { TSymbol _ "return" }
  "switch" { TSymbol _ "switch" }
  "tagged" { TSymbol _ "tagged" }
  "when" { TSymbol _ "when" }
  "while" { TSymbol _ "while" }
  "{" { TSymbol _ "{" }
  "|" { TSymbol _ "|" }
  "}" { TSymbol _ "}" }

  uident { TUident _ _ }
  usym { TUsym _ _ }
  lident { TLident _ _ }
  string { TString _ _ }
  char { TChar _ _ }
  number { TNumber _ _ }
%%
Module
  : "module" uident ImportList DefineList {Module   (unTUident $2) $3 $4}
  
Import
  : "import" uident {Import   (unTUident $2)}
  
Define
  : "define" Type lident "(" TVarList ")" "=" "{" StmtList "}" {Define   $2 (unTLident $3)  $5    $9 }
  
Stmt
  : TVar "=" Exp {LetS  $1  $3}
  | TVar ":=" Atom {StoreS  $1  $3}
  | "call" TVar "(" AtomList ")" {CallS   $2  $4 }
  | "switch" Atom "{" StmtList "}" "{" SwitchAltList "}" {SwitchS   $2  $4   $7 }
  | "if" Atom "{" StmtList "}" "{" StmtList "}" {IfS   $2  $4   $7 }
  | "when" Atom "{" StmtList "}" {WhenS   $2  $4 }
  | "while" "{" StmtList "}" Atom "{" StmtList "}" {WhileS    $3  $5  $7 }
  | "return" Atom {ReturnS   $2}
  | "noop" {NoOpS  }
Exp
  : TVar "(" AtomList ")" {CallE  $1  $3 }
  | "cast" TVar Type {CastE   $2 $3}
  | "alloca" Type {AllocaE   $2}
  | "load" "(" TVar ")" {LoadE    $3 }
  | Atom {AtomE  $1}
Atom
  : TLit {LitA  $1}
  | TVar {VarA  $1}
SwitchAlt
  : TLit "->" "{" StmtList "}" {SwitchAlt  $1   $4 }
  
Lit
  : string {StringL  (unTString $1)}
  | number {NmbrL  (unTNumber $1)}
  | char {CharL  (unTChar $1)}
  | uident {EnumL  (unTUident $1)}
  | {VoidL }
TyDecl
  : "enum" EnumCList {TyEnum   $2}
  | "record" "{" FieldTList "}" {TyRecord    $3 }
  | "tagged" ConCList {TyTagged   $2}
TVar
  : lident "::" Type {TVar  (unTLident $1)  $3}
  
TLit
  : Lit "::" Type {TLit  $1  $3}
  
FieldT
  : uident "::" Type {FieldT  (unTUident $1)  $3}
  
ConC
  : uident Type {ConC  (unTUident $1) $2}
  
Type
  : uident "(" TypeList ")" {Type  (unTUident $1)  $3 }
  
EnumC
  : uident {EnumC  (unTUident $1)}
  
ConCList
  : REV_ConCList {reverse $1}
  
REV_ConCList
  : ConC {[$1]}
  | REV_ConCList "|" ConC {$3 : $1}
FieldTList
  : REV_FieldTList {reverse $1}
  
REV_FieldTList
  : FieldT {[$1]}
  | REV_FieldTList "," FieldT {$3 : $1}
EnumCList
  : REV_EnumCList {reverse $1}
  
REV_EnumCList
  : EnumC {[$1]}
  | REV_EnumCList "|" EnumC {$3 : $1}
TypeList
  : REV_TypeList {reverse $1}
  | {- empty -} { [] }
REV_TypeList
  : Type {[$1]}
  | REV_TypeList "," Type {$3 : $1}
ExpList
  : REV_ExpList {reverse $1}
  
REV_ExpList
  : Exp {[$1]}
  | REV_ExpList "," Exp {$3 : $1}
AtomList
  : REV_AtomList {reverse $1}
  
REV_AtomList
  : Atom {[$1]}
  | REV_AtomList "," Atom {$3 : $1}
TVarList
  : REV_TVarList {reverse $1}
  
REV_TVarList
  : TVar {[$1]}
  | REV_TVarList "," TVar {$3 : $1}
SwitchAltList
  : REV_SwitchAltList {reverse $1}
  | {- empty -} { [] }
REV_SwitchAltList
  : SwitchAlt ";" {[$1]}
  | REV_SwitchAltList SwitchAlt ";" {$2 : $1}
StmtList
  : REV_StmtList {reverse $1}
  | {- empty -} { [] }
REV_StmtList
  : Stmt ";" {[$1]}
  | REV_StmtList Stmt ";" {$2 : $1}
DefineList
  : REV_DefineList {reverse $1}
  | {- empty -} { [] }
REV_DefineList
  : Define ";" {[$1]}
  | REV_DefineList Define ";" {$2 : $1}
ImportList
  : REV_ImportList {reverse $1}
  | {- empty -} { [] }
REV_ImportList
  : Import ";" {[$1]}
  | REV_ImportList Import ";" {$2 : $1}